Vim 极简入门
======================================

最近有兴趣折腾了一下 `Vim <https://www.vim.org/>`_ ，不免对这个上古神器的强大感到震撼。这篇文章简要记录下基本操作，只能说是冰山一角。


----


认识 Vim 基本模式
--------------------------------------

Vim 有三种基本模式：普通模式、插入模式和命令行模式。普通模式是打开 Vim 之后的默认模式，也是进行模式转换的桥梁。在普通模式下，可以进行常规的浏览、替换、删除、粘贴等命令；在普通模式下按 :kbd:`i` 即可切换到插入模式，这种模式与常规的文本编辑器相同，可以自由添加、修改、删除文本内容；按 :kbd:`Esc` 可以从插入模式切换回普通模式，再次键入 :kbd:`:` 会切换到命令行模式。这种模式支持各种命令的使用，在我看来也是 Vim 的强大之处所在。

.. note::

    Vim 命令对大小写敏感，因此在使用 Vim 时务必确保大写锁定处于关闭状态。通常情况下，大家会建议将键盘的 :kbd:`Caps Lock` 键重新映射为 :kbd:`Esc` ，对于 Manjaro 系统，可以通过系统设置中的键盘的高级选项进行修改，非常方便。

.. hint::

    当本文提及大写的命令如 :kbd:`A` 时，实际上是指 :kbd:`Shift` + :kbd:`a` 的组合键。


退出 Vim
--------------------------------------

网络上流传有这么一个段子：“问：如何产生随机字符串？答：让新手退出 Vim。“

退出 Vim 首先要确保处于普通模式，如果不是很确定，可以多按几次 :kbd:`Esc` 。然后输入 ``:quit`` 即可退出 Vim。这个命令可以这样来看，首先键入的 :kbd:`:` 使 Vim 进入到命令行模式，而 ``quit`` 就是执行的命令。

可以猜想，如果只是写入文档而不退出（一般编辑器下的”保存“按钮），应当执行 ``:write`` ；如果想看某个命令的帮助文档，应该会涉及 ``:help`` 命令，实际上的确如此。在普通模式下输入 ``:help quit`` 就可以看到相应的帮助文档，其中 ``:q[uit]`` 的中括号部分表示可以省略。因此 :``quit`` 可以简写为 ``:q`` 。

如果文档进行了改动，直接运行 ``:q`` 会抛出警告，这时需要写入后退出，或者不保存退出。汇总这些相关的命令，如下：

- ``:q`` --- 退出 Vim （关闭文档）；
- ``:w`` --- 写入（保存）文档但不退出；
- ``:wq`` --- 保存并关闭当前文档；
- ``:q!`` --- 忽略所有更改并关闭当前文档。


移动光标
--------------------------------------

移动光标需要在普通模式下进行，用于浏览文档或为编辑做准备。

基本移动
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

普通模式下，光标移动可以通过以下按键实现：

- :kbd:`h` --- 左移一个字符；
- :kbd:`j` --- 下移一行；
- :kbd:`k` --- 上已一行；
- :kbd:`l` --- 右移一个字符；
- :kbd:`0` --- 移动到本行开头；
- :kbd:`$` --- 移动到本行末尾；
- :kbd:`gg` --- 移动到文档首行开头；
- :kbd:`G` --- 移动到文档最后一行开头。

Vim 的命令在执行前可以指定重复次数，例如下移15行可以使用 ``15j`` 来完成。特别地，在 :kbd:`G` 之前指定数字可以跳转到指定行。为了在 Vim 中显示行号，可以在普通模式下执行 ``:set number`` 。

.. note::

    当文档单行内容过长而 Vim 的 ``wrap`` 设置被启用（默认启用）时，过长的文字会在屏幕内自动换行，但这并不是真正的换行。Vim 默认的 ``j`` 命令是对实际行进行操作，遇到这种情况时难免会出乎我们的期望，因此可以使用 ``gj`` 和 ``gk`` 进行屏幕行的跳转。


为了默认使用屏幕行的跳转，我们会将 ``j`` 与 ``gj`` 的功能互换，可以在配置文件 ``.vimrc`` 中添加以下内容：

.. code-block:: text

    nnoremap k gk
    nnoremap gk k
    nnoremap j gj
    nnoremap gj j


基于单词的移动
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

比普通模式更快地，Vim 可以基于单词进行移动，主要命令如下：

- :kbd:`w` --- 移动到下一个单词开头；
- :kbd:`e` --- 移动到当前单词结尾；
- :kbd:`b` --- 向前移动到单词开头；
- :kbd:`ge` --- 向前移动到单词结尾；
- :kbd:`W` --- 移动到下一个字符串开头；
- :kbd:`E` --- 移动到下一个字符串结尾；
- :kbd:`B` --- 向前移动到字符串开头；
- :kbd:`gE` --- 向前移动到字符串结尾。

对比可以发现，小写命令针对单词，而大写命令针对的是字符串，两者的区别在于对特殊字符的处理方式：单词认为 ``‘`` 是单词之间的分割，而字符串则严格以空格作为分割。例如 ``let's go`` 这个短语会被 Vim 解读成4个单词或2个字符串。

基于查找的移动
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Vim 可以使用 :kbd:`f` 对行内的单个字符进行查找，结合 :kbd:`;` 向后继续查找，当跳转过头时使用 :kbd:`,` 向前查找。同样，也可以使用 :kbd:`/` 对字符串进行查找，使用 :kbd:`n` 或 :kbd:`N` 分别向后、向前继续查找。

我们用下面的一个例子来对比各种移动光标的方法：

.. code-block::text
    The quick brown fox jumps over the lazy dog.

假设现在光标处于这段话的开头，现在希望将光标跳转到 ``over`` 的开头，有这么几种做法：

- ``wwwww`` --- 所见即所得，只要不觉得麻烦就可以达到效果；
- ``5w`` --- 与上一个命令等价，虽然按键少了，但需要一定的计算；
- ``fo;;`` --- 首先 ``fo`` 指定了对字符 ``o`` 的查找，光标跳转到 ``brown`` 的中间，然后继续查找两次达成目标；
- ``fvh`` --- 对 ``v`` 进行查找，然后向左移动一个字符；
- ``/over<Enter>`` --- 对字符串 ``over`` 进行查找并跳转（其中 ``<Enter>`` 表示按回车键）。

对比这几种方法，第一种最直观，但是当句子特别长时跳转很慢；第二种虽然看起来简单，但数数的功夫容易得不偿失，也很少使用；第三种方法应该说是最常用也是最容易被人接受的，当句子较长时能够获得比较快的跳转速度；第四种是第三种的高阶用法，查找不常出现的字符以提高跳转速度；最后一种单次使用时输入较为复杂，通常结合替换使用。

其他跳转方法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:kbd:`%` 可以用于配对符号之间的跳转，例如在 ``(`` 处按 :kbd:`%` 可以跳转到相应的 ``)`` ，这个功能特别适合对代码进行检查。

:kbd:`m` 和 :kbd:`\`` 构成标记-跳转对。例如， ``ma`` 将当前位置标记为 ``a`` ，普通模式下使用 ``\`a`` 就可以跳转到刚刚标记的位置。需要说明的是，标记只能是单个字符，并且区分大小写；单个文档可以存在多个标记。


选定范围
--------------------------------------

编辑文档
--------------------------------------

（施工中，未完待续）

.. 在普通模式进行少量修改
.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. 
.. 在普通模式下可以对文档进行部分删除和简单的替换工作，常用有：
.. 
.. - :kbd:`x` --- 删除当前字符；
.. - :kbd:`r` --- 使用另一个字符替换当前字符，例如 ``re`` 是将光标下的字符替换为 ``e`` 。
.. 
.. 除此之外，在普通模式下还可以对文档内容进行删除，这会用到 :kbd:`d` 。然而删除需要指定对象，可以使用命令来指定或使用可视模式进行框选。
.. 
.. 
.. 
.. 从插入模式编辑文档
.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. 
.. 
.. 
